#include "stdint.h"
#include "idt_struct.h"

#define CODE_SEGMENT 0x0
#define CODE_LIMIT   0xFFFFF
#define DATA_SEGMENT 0x0
#define DATA_LIMIT   0xFFFFF

#define IDT_ENTRIES 36
#define IDT_SIZE IDT_ENTRIES*8

extern void* isr_stub_table[];

extern void catchall_interrupt();
extern void kb_int();

uint8_t interrupt_descriptor_table[IDT_SIZE];
IDT_Descriptor idt_descriptor;

// uint16_t generate_segment_selector(uint16_t index, uint8_t descriptor_table, uint8_t privilege)
// {
//     if (index > 0x1FFF) return 0x0;
//     uint16_t selector = index << 3;
//     selector |= (0x1 & descriptor_table) << 2;
//     selector |= (0x3 & privilege);
//     return selector;
// }

void idt_setup() {
    // ensure everything is zeroed out
    for (uint32_t i = 0; i < IDT_SIZE; i++)
        interrupt_descriptor_table[i] = 0x0;

    // uint16_t seg = generate_segment_selector(
    //     CODE_SEGMENT,
    //     0,
    //     IDT_RING0
    // );
    
    Gate_Descriptor gate;

    for (int i = 0; i < IDT_ENTRIES; i++)
    {
        if (i == 9)
            gate.offset = &kb_int;
        else
            gate.offset = isr_stub_table[i];
        gate.seg = 0x8;
        gate.type_selector = IDT_32BIT_INTERRUPT_GATE;
        encode_idt_entry(interrupt_descriptor_table + i*8, &gate);
    }

    idt_descriptor.offset = (uint32_t)&interrupt_descriptor_table;
    idt_descriptor.size = IDT_SIZE - 1;
}